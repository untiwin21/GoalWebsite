import React, { useState } from 'react';
import Calendar from './Calendar';

const Monthly = ({ data, updateData }) => {
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingGoal, setEditingGoal] = useState(null);
  const [editingSubGoalIndex, setEditingSubGoalIndex] = useState(null);
  const [newGoal, setNewGoal] = useState({ title: '', subGoals: [] });
  const [newSubGoal, setNewSubGoal] = useState('');
  const [draggedItem, setDraggedItem] = useState(null);
  const [draggedSubGoal, setDraggedSubGoal] = useState(null);
  const [draggedFromGoal, setDraggedFromGoal] = useState(null);

  const addGoal = () => {
    if (newGoal.title.trim()) {
      const goal = {
        id: Date.now(),
        title: newGoal.title,
        subGoals: newGoal.subGoals.map((sub, index) => ({
          id: Date.now() + index,
          title: sub,
          completed: false
        })),
        completed: false,
        createdAt: new Date().toISOString()
      };
      
      updateData({
        ...data,
        monthlyGoals: [...(data.monthlyGoals || []), goal]
      });
      
      setNewGoal({ title: '', subGoals: [] });
      setShowAddForm(false);
    }
  };

  const editGoal = (goalId) => {
    const goal = data.monthlyGoals.find(g => g.id === goalId);
    if (goal) {
      setEditingGoal(goalId);
      setNewGoal({
        title: goal.title,
        subGoals: goal.subGoals.map(sub => sub.title)
      });
      setShowAddForm(true);
    }
  };

  const updateGoal = () => {
    if (newGoal.title.trim() && editingGoal) {
      const updatedGoals = data.monthlyGoals.map(goal => {
        if (goal.id === editingGoal) {
          return {
            ...goal,
            title: newGoal.title,
            subGoals: newGoal.subGoals.map((sub, index) => ({
              id: goal.subGoals[index]?.id || Date.now() + index,
              title: sub,
              completed: goal.subGoals[index]?.completed || false
            }))
          };
        }
        return goal;
      });
      
      updateData({
        ...data,
        monthlyGoals: updatedGoals
      });
      
      setNewGoal({ title: '', subGoals: [] });
      setShowAddForm(false);
      setEditingGoal(null);
    }
  };

  const toggleMainGoal = (goalId) => {
    const updatedGoals = data.monthlyGoals.map(goal => {
      if (goal.id === goalId) {
        return { ...goal, completed: !goal.completed };
      }
      return goal;
    });
    
    updateData({
      ...data,
      monthlyGoals: updatedGoals
    });
  };

  const removeGoal = (goalId) => {
    updateData({
      ...data,
      monthlyGoals: data.monthlyGoals.filter(goal => goal.id !== goalId)
    });
  };

  const toggleSubGoal = (goalId, subGoalId) => {
    const updatedGoals = data.monthlyGoals.map(goal => {
      if (goal.id === goalId) {
        const updatedSubGoals = goal.subGoals.map(sub => 
          sub.id === subGoalId ? { ...sub, completed: !sub.completed } : sub
        );
        return { ...goal, subGoals: updatedSubGoals };
      }
      return goal;
    });
    
    updateData({
      ...data,
      monthlyGoals: updatedGoals
    });
  };

  const addSubGoal = () => {
    if (newSubGoal.trim()) {
      setNewGoal({
        ...newGoal,
        subGoals: [...newGoal.subGoals, newSubGoal.trim()]
      });
      setNewSubGoal('');
    }
  };

  const removeSubGoal = (index) => {
    setNewGoal({
      ...newGoal,
      subGoals: newGoal.subGoals.filter((_, i) => i !== index)
    });
  };

  // 폼에서 하위 목표 편집
  const editSubGoalInForm = (index, newText) => {
    const updatedSubGoals = [...newGoal.subGoals];
    updatedSubGoals[index] = newText;
    setNewGoal({
      ...newGoal,
      subGoals: updatedSubGoals
    });
    setEditingSubGoalIndex(null);
  };

  const getGoalProgress = (goal) => {
    if (!goal.subGoals || goal.subGoals.length === 0) {
      return goal.completed ? 100 : 0;
    }
    
    const completed = goal.subGoals.filter(sub => sub.completed).length;
    return Math.round((completed / goal.subGoals.length) * 100);
  };

  const getTotalProgress = () => {
    if (!data.monthlyGoals || data.monthlyGoals.length === 0) return 0;
    
    const totalProgress = data.monthlyGoals.reduce((sum, goal) => {
      return sum + getGoalProgress(goal);
    }, 0);
    
    return Math.round(totalProgress / data.monthlyGoals.length);
  };

  // 드래그 앤 드롭 핸들러
  const handleDragStart = (e, index) => {
    setDraggedItem(index);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e, dropIndex) => {
    e.preventDefault();
    
    if (draggedItem === null || draggedItem === dropIndex) {
      setDraggedItem(null);
      return;
    }

    const newGoals = [...data.monthlyGoals];
    const draggedGoal = newGoals[draggedItem];
    
    // 드래그된 아이템 제거
    newGoals.splice(draggedItem, 1);
    
    // 새 위치에 삽입
    newGoals.splice(dropIndex, 0, draggedGoal);
    
    updateData({
      ...data,
      monthlyGoals: newGoals
    });
    
    setDraggedItem(null);
  };

  const handleDragEnd = () => {
    setDraggedItem(null);
    setDraggedSubGoal(null);
    setDraggedFromGoal(null);
  };

  // 하위 목표 드래그 앤 드롭 핸들러
  const handleSubGoalDragStart = (e, goalId, subGoalIndex) => {
    setDraggedSubGoal(subGoalIndex);
    setDraggedFromGoal(goalId);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleSubGoalDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleSubGoalDrop = (e, goalId, dropIndex) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (draggedSubGoal === null || draggedFromGoal !== goalId || draggedSubGoal === dropIndex) {
      setDraggedSubGoal(null);
      setDraggedFromGoal(null);
      return;
    }

    const updatedGoals = data.monthlyGoals.map(goal => {
      if (goal.id === goalId) {
        const newSubGoals = [...goal.subGoals];
        const draggedSubGoalItem = newSubGoals[draggedSubGoal];
        
        newSubGoals.splice(draggedSubGoal, 1);
        const adjustedDropIndex = draggedSubGoal < dropIndex ? dropIndex - 1 : dropIndex;
        newSubGoals.splice(adjustedDropIndex, 0, draggedSubGoalItem);
        
        return { ...goal, subGoals: newSubGoals };
      }
      return goal;
    });
    
    updateData({
      ...data,
      monthlyGoals: updatedGoals
    });
    
    setDraggedSubGoal(null);
    setDraggedFromGoal(null);
  };

  const renderMonthlyCalendar = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth();
    
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const days = [];
    const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
    
    // 요일 헤더
    dayNames.forEach(day => {
      days.push(
        <div key={day} className="calendar-day header">
          {day}
        </div>
      );
    });
    
    // 날짜들
    for (let i = 0; i < 42; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);
      
      const isToday = currentDate.toDateString() === today.toDateString();
      const isCurrentMonth = currentDate.getMonth() === month;
      
      days.push(
        <div
          key={i}
          className={`calendar-day ${isToday ? 'today' : ''}`}
          style={{ opacity: isCurrentMonth ? 1 : 0.3 }}
        >
          {currentDate.getDate()}
        </div>
      );
    }
    
    return days;
  };

  return (
    <div className="page-container">
      <div className="main-split-layout">
        <div className="main-left-section">
          <Calendar data={data} updateData={updateData} type="monthly" />
        </div>
        
        <div className="main-right-section">
          <h1 className="page-title">월간 목표</h1>
          <div className="goals-section">
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>
              <h3 style={{ color: 'var(--secondary-color)', fontSize: '1.5rem' }}>이번 달 목표</h3>
              <button 
                className="action-btn add-btn"
                onClick={() => {
                  setShowAddForm(!showAddForm);
                  setEditingGoal(null);
                  setNewGoal({ title: '', subGoals: [] });
                }}
                title="새 목표 추가"
              >
                +
              </button>
            </div>
          
          {showAddForm && (
            <div className="add-goal-form">
              <div className="form-group">
                <label>목표 제목</label>
                <input
                  type="text"
                  value={newGoal.title}
                  onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}
                  placeholder="새로운 월간 목표를 입력하세요"
                />
              </div>
              
              <div className="form-group">
                <label>하위 목표</label>
                <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>
                  <input
                    type="text"
                    value={newSubGoal}
                    onChange={(e) => setNewSubGoal(e.target.value)}
                    placeholder="하위 목표를 입력하세요"
                    onKeyPress={(e) => e.key === 'Enter' && addSubGoal()}
                  />
                  <button 
                    type="button" 
                    className="action-btn add-btn"
                    onClick={addSubGoal}
                    title="하위 목표 추가"
                  >
                    +
                  </button>
                </div>
                
                {newGoal.subGoals.map((sub, index) => (
                  <div key={index} style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center', 
                    padding: '0.5rem 1rem',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: '8px',
                    margin: '0.5rem 0'
                  }}>
                    {editingSubGoalIndex === index ? (
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flex: 1 }}>
                        <span>• </span>
                        <input
                          type="text"
                          value={sub}
                          onChange={(e) => {
                            const updatedSubGoals = [...newGoal.subGoals];
                            updatedSubGoals[index] = e.target.value;
                            setNewGoal({ ...newGoal, subGoals: updatedSubGoals });
                          }}
                          onKeyPress={(e) => {
                            if (e.key === 'Enter') {
                              setEditingSubGoalIndex(null);
                            }
                            if (e.key === 'Escape') {
                              setEditingSubGoalIndex(null);
                            }
                          }}
                          onBlur={() => setEditingSubGoalIndex(null)}
                          autoFocus
                          style={{
                            flex: 1,
                            padding: '4px 8px',
                            border: '1px solid #007bff',
                            borderRadius: '4px',
                            background: 'white',
                            color: 'black'
                          }}
                        />
                      </div>
                    ) : (
                      <span 
                        style={{ 
                          cursor: 'pointer',
                          flex: 1
                        }}
                        onClick={() => setEditingSubGoalIndex(index)}
                        title="클릭해서 편집"
                      >
                        • {sub}
                      </span>
                    )}
                    <button 
                      className="action-btn remove-btn"
                      onClick={() => removeSubGoal(index)}
                      title="하위 목표 삭제"
                    >
                      -
                    </button>
                  </div>
                ))}
              </div>
              
              <div style={{ display: 'flex', gap: '1rem' }}>
                <button className="submit-btn" onClick={editingGoal ? updateGoal : addGoal}>
                  {editingGoal ? '목표 수정' : '목표 추가'}
                </button>
                {showAddForm && (
                  <button 
                    className="submit-btn" 
                    style={{ background: 'var(--accent-color)' }}
                    onClick={() => {
                      setShowAddForm(false);
                      setEditingGoal(null);
                      setNewGoal({ title: '', subGoals: [] });
                    }}
                  >
                    취소
                  </button>
                )}
              </div>
            </div>
          )}
          
          {data.monthlyGoals && data.monthlyGoals.map((goal, index) => (
            <div 
              key={goal.id} 
              className={`goal-item ${draggedItem === index ? 'dragging' : ''}`}
              draggable
              onDragStart={(e) => handleDragStart(e, index)}
              onDragOver={handleDragOver}
              onDrop={(e) => handleDrop(e, index)}
              onDragEnd={handleDragEnd}
            >
              <div className="drag-handle" title="드래그해서 순서 변경">
                ⋮⋮
              </div>
              <div className="goal-content">
                <div className="goal-title">
                  {goal.subGoals && goal.subGoals.length === 0 ? (
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.8rem' }}>
                      <input
                        type="checkbox"
                        className="checkbox"
                        checked={goal.completed}
                        onChange={() => toggleMainGoal(goal.id)}
                      />
                      <span style={{ textDecoration: goal.completed ? 'line-through' : 'none' }}>
                        {goal.title}
                      </span>
                    </div>
                  ) : (
                    goal.title
                  )}
                </div>
                {goal.subGoals && goal.subGoals.length > 0 && (
                  <div className="sub-goals">
                    {goal.subGoals.map((sub, subIndex) => (
                      <div 
                        key={sub.id} 
                        className={`sub-goal ${draggedSubGoal === subIndex && draggedFromGoal === goal.id ? 'dragging' : ''}`}
                        draggable
                        onDragStart={(e) => handleSubGoalDragStart(e, goal.id, subIndex)}
                        onDragOver={handleSubGoalDragOver}
                        onDrop={(e) => handleSubGoalDrop(e, goal.id, subIndex)}
                        onDragEnd={handleDragEnd}
                        style={{
                          cursor: 'move',
                          opacity: draggedSubGoal === subIndex && draggedFromGoal === goal.id ? 0.5 : 1,
                          border: draggedSubGoal === subIndex && draggedFromGoal === goal.id ? '2px dashed #007bff' : 'none',
                          padding: '5px',
                          margin: '2px 0',
                          borderRadius: '4px',
                          backgroundColor: draggedSubGoal === subIndex && draggedFromGoal === goal.id ? '#f8f9fa' : 'transparent'
                        }}
                      >
                        <span style={{ 
                          cursor: 'move', 
                          marginRight: '8px',
                          color: '#666',
                          fontSize: '12px'
                        }}>
                          ⋮⋮
                        </span>
                        <input
                          type="checkbox"
                          className="checkbox"
                          checked={sub.completed}
                          onChange={() => toggleSubGoal(goal.id, sub.id)}
                        />
                        <span style={{ textDecoration: sub.completed ? 'line-through' : 'none' }}>
                          {sub.title}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <div className="goal-progress">{getGoalProgress(goal)}%</div>
              <div className="goal-actions">
                <button 
                  className="action-btn edit-btn"
                  onClick={() => editGoal(goal.id)}
                  title="수정"
                >
                  ✏️
                </button>
                <button 
                  className="action-btn remove-btn"
                  onClick={() => removeGoal(goal.id)}
                  title="삭제"
                >
                  -
                </button>
              </div>
            </div>
          ))}
          
          <div className="total-progress">
            <div className="progress-text">
              이번 달 총 달성률: {getTotalProgress()}%
            </div>
          </div>
        </div>
        
        <div>
          <div className="calendar-mini">
            <div className="calendar-header">
              {new Date().toLocaleDateString('ko-KR', { year: 'numeric', month: 'long' })}
            </div>
            <div className="calendar-grid">
              {renderMonthlyCalendar()}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Monthly;
